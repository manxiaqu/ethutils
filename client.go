package ethutils

import (
	"context"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	log "github.com/inconshreveable/log15"
)

// MustGetClient panics if can't get client
func MustGetClient(url string) *ethclient.Client {
	client, err := ethclient.Dial(url)
	if err != nil {
		panic(err)
	}

	return client
}

// MustSetNonce sets nonce to ethereum account if nonce is nil.
func MustSetNonce(client *ethclient.Client, account *bind.TransactOpts) {
	if account.Nonce == nil {
		nonce, err := client.NonceAt(context.Background(), account.From, nil)
		if err != nil {
			panic(err)
		}

		account.Nonce = new(big.Int).SetUint64(nonce)
	}
}

// DeployFunc is a func to deploy contract.
type DeployFunc func(auth *bind.TransactOpts, backend bind.ContractBackend, params ...interface{}) (common.Address, *types.Transaction, interface{}, error)

// AutoDeploy deploys contract/ panic if error/logs info info.
// Transaction sender's nonce will add 1 automatically.
func AutoDeploy(optionName string, deployFunc DeployFunc, auth *bind.TransactOpts, backend bind.ContractBackend, params ...interface{}) (common.Address, *types.Transaction, interface{}) {
	addr, tx, inter, err := deployFunc(auth, backend, params)
	if err != nil {
		panic(err)
	}

	// Sender nonce add 1.
	auth.Nonce.Add(auth.Nonce, One)

	if optionName == "" {
		log.Info("deploy contract", "tx", tx.Hash().Hex(), "address", addr.Hex())
	} else {
		log.Info("deploy contract", "name", optionName, "tx", tx.Hash().Hex(), "address", addr.Hex())
	}

	return addr, tx, inter
}

// ContractTransactFunc is a func to send tx to contract. Panic if errors.
// Transaction sender's nonce will add 1 automatically.
type ContractTransactFunc func(auth *bind.TransactOpts, params ...interface{}) (*types.Transaction, error)

// AutoSendTxToContract send tx to contract using contract object generated by abigen. Panic if errors.
// Transaction sender's nonce will add 1 automatically.
func AutoSendTxToContract(optionName string, transactFunc ContractTransactFunc, auth *bind.TransactOpts, params ...interface{}) *types.Transaction {
	tx, err := transactFunc(auth, params)
	if err != nil {
		panic(err)
	}

	// Sender nonce add 1.
	auth.Nonce.Add(auth.Nonce, One)
	if optionName == "" {
		log.Info("send tx to contract", "tx", tx.Hash().Hex())
	} else {
		log.Info("send tx to contract", "txName", optionName, "tx", tx.Hash().Hex())
	}

	return tx
}
